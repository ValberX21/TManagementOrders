@using TManagementOrders.Domain.Entities
@model Orders

@{
    ViewData["Title"] = "Criar Pedido";
}

<div class="mb-4 mt-4">

    <h2 class="mb-4 text-center">Criar Pedido</h2>

    <div class="mb-3">
        <label for="clientSearch" class="form-label">Buscar Cliente</label>
        <div class="input-group">
            <input type="text" class="form-control" id="clientSearch" placeholder="Digite o nome do cliente..." />
            <input type="hidden" id="selectedClientId" name="ClientId" />
            <button type="button" class="btn btn-outline-secondary" id="btnSearchClient">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div> 

     <div class="mb-3">
        <label for="productSearch" class="form-label">Buscar Produto</label>
        <div class="input-group">
            <input type="text" class="form-control" id="productSearch" placeholder="Digite o nome do produto..." />
            
            <input type="hidden" id="selectedProductId" name="ProductId" />
            <input type="hidden" id="selectedProductPrice" name="ProductPrice" />

            <button type="button" class="btn btn-outline-secondary" id="btnSearchProduct">
                <i class="bi bi-search"></i>
            </button>
            <button type="button" class="btn btn-outline-success" id="btnAddProduct">
                <i class="bi bi-plus-circle"></i> Adicionar
            </button>      
        </div>
    </div> 

     <div class="mb-4">
        <label class="form-label">Itens do Pedido</label>
        <table class="table table-bordered table-striped" id="orderItemsGrid">
            <thead>
                <tr>
                    <th hidden="hidden">Id</th>
                    <th>Produto</th>
                    <th>Quantidade</th>
                    <th>Preço Unitário</th>    
                    <th>Preço total</th>
                    <th>Remover</th>
                </tr>
            </thead>
            <tbody>
               
            </tbody>
        </table>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <button type="submit" class="btn btn-primary" id="btnCreateOrder">
                <i class="bi bi-check-lg"></i> Criar Pedido
            </button>
            <h4><strong>TOTAL DO PEDIDO: <span id="orderTotal">R$ 0,00</span></strong></h4>           
        </div>
    </div> 
</div>

@section Scripts {
    <script>      

        document.addEventListener("DOMContentLoaded", function () {

            const orderItems = [];

            document.getElementById("btnSearchClient").addEventListener("click", async function () {
                const input = document.getElementById("clientSearch");
                const query = input.value;

                try {
                    const response = await fetch(`/Client/SearchClient?name=${encodeURIComponent(query)}`);
                    if (!response.ok) {
                        alert("Cliente não encontrado.");
                        return;
                    }

                    const client = await response.json();
                    input.value = client.name;
                    document.getElementById("selectedClientId").value = client.id;

                } catch (error) {
                    console.error("Erro ao buscar cliente:", error);
                    alert("Erro ao buscar cliente.");
                }
            });

            document.getElementById("btnSearchProduct").addEventListener("click", async function () {
               
                const input = document.getElementById("productSearch");
                
                const query = input.value;
                try {
                    const response = await fetch(`/Product/SearchProduct?name=${encodeURIComponent(query)}`);
                    if (!response.ok) {
                        alert("Produto não encontrado.");
                        return;
                    }

                    const product = await response.json();
                    input.value = product.name;
                    document.getElementById("selectedProductId").value = product.id;
                    document.getElementById("selectedProductPrice").value = product.price;

                } catch (error) {
                    console.error("Erro ao buscar produto:", error);
                    alert("Erro ao buscar produto.");
                }
            });

            document.getElementById("btnAddProduct").addEventListener("click", async function () {                               


                const productId = document.getElementById("selectedProductId").value;

                if(!productId)
                {
                     alert('Favor busque um produto antes de adicionar ao pedido !')
                     return
                }

                if(orderItems.find(i => i.productId == productId))
                {
                     alert('Produto ja adionado ao pedido')
                     clearDataAfterAddProduct();
                     return
                }
                    
               
                const productName = document.getElementById("productSearch").value;
                const productPrice = document.getElementById("selectedProductPrice").value;

                var newItem = {
                    IdProduct: productId,
                    productName: productName,
                    quantity: 1,
                    unitPrice: parseFloat(productPrice)
                }

                 orderItems.push(newItem);

                 updateOrderTable();

                 clearDataAfterAddProduct();
            })

            function updateOrderTable() 
            {
                const tbody = document.querySelector("#orderItemsGrid tbody");
                tbody.innerHTML = "";

                orderItems.forEach((item, index) => {
                    const row = document.createElement("tr");

                    row.innerHTML = `
                        <td>${item.productName}</td>
                        <td><input type="number" class="form-control quantity-input" data-index="${index}" value="${item.quantity}" min="1" /></td>
                        <td>R$ ${item.unitPrice.toFixed(2)}</td>
                        <td>R$ ${(item.unitPrice * item.quantity).toFixed(2)}</td>
                        <td><button type="button" class="btn btn-danger btn-sm" onclick="removeItem(${index})">Remover</button></td>
                    `;

                    tbody.appendChild(row);
                });

                const totalOrder = orderItems.reduce((sum, item) => {
                    return sum + (item.quantity * item.unitPrice);
                }, 0);

                console.log(totalOrder);

                document.getElementById("orderTotal").textContent = `R$ ${totalOrder.toFixed(2)}`;
                attachQuantityChangeHandlers();
            }

            function attachQuantityChangeHandlers() {
                document.querySelectorAll(".quantity-input").forEach(input => {
                    input.addEventListener("change", function () {
                        const index = this.dataset.index;
                        const newQty = parseInt(this.value);
                        if (newQty >= 1) {
                            orderItems[index].quantity = newQty;
                            updateOrderTable();
                        }
                    });
                });
            }           

            function clearDataAfterAddProduct(){

                 document.getElementById("selectedProductId").value = '';
                 document.getElementById("productSearch").value = '';
                 document.getElementById("selectedProductPrice").value = '';
            }

            document.getElementById("btnCreateOrder").addEventListener("click", async function (e) {

                console.log("List - ", orderItems);
                e.preventDefault();

                const clientId = document.getElementById("selectedClientId").value;
                if (!clientId) 
                {
                    alert("Selecione um cliente antes de criar o pedido.");
                    return;
                }

                if (orderItems.length === 0) {
                    alert("Adicione ao menos um produto ao pedido.");
                    return;
                }

                const totalText = document.getElementById("orderTotal").textContent.replace("R$", "").trim().replace(",", ".");
                const total = parseFloat(totalText);

                const itensOrder = 
                {
                    IdClient : clientId,
                    Total :    total,
                    OrderItems : orderItems
                };

               try {
                    const response = await fetch("/Orders/CreateOrder", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(itensOrder)
                    });

                    if (response.ok) {
                        alert("Pedido criado com sucesso!");
                        window.location.href = "/Orders"; // redirect to order list, for example
                    } else {
                        const errorText = await response.text();
                        alert("Erro ao criar pedido: " + errorText);
                    }
                } catch (error) {
                    console.error("Erro ao enviar pedido:", error);
                    alert("Erro inesperado ao criar o pedido.");
                }

            });

            window.removeItem = function(index) {
                orderItems.splice(index, 1);
                updateOrderTable();
            };

        });


    </script>
}

